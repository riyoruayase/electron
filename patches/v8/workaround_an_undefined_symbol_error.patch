From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Richard Townsend <richard.townsend@arm.com>
Date: Wed, 24 Apr 2019 13:57:36 +0100
Subject: Workaround an undefined symbol error

Previously, builds configured with dcheck_always_on=true would error
with messages like this in the log:
 lld-link: error: undefined symbol: public: bool __cdecl
  v8::internal::CPURegister::IsZero(void) const

By moving some functions out of the the arm64-assembler header file,
this error no longer seems to happen.

diff --git a/src/codegen/arm64/assembler-arm64.cc b/src/codegen/arm64/assembler-arm64.cc
index 2e21ab913d7b5ebc62857883ce3907c451b56399..e6a6b39086b2d5a6bf39b5a88df970cec662edf5 100644
--- a/src/codegen/arm64/assembler-arm64.cc
+++ b/src/codegen/arm64/assembler-arm64.cc
@@ -3600,6 +3600,22 @@ void Assembler::MoveWide(const Register& rd, uint64_t imm, int shift,
        ImmMoveWide(static_cast<int>(imm)) | ShiftMoveWide(shift));
 }
 
+Instr Assembler::RmNot31(CPURegister rm) {
+  DCHECK_NE(rm.code(), kSPRegInternalCode);
+  DCHECK(!rm.IsZero());
+  return Rm(rm);
+}
+
+Instr Assembler::RdSP(Register rd) {
+  DCHECK(!rd.IsZero());
+  return (rd.code() & kRegCodeMask) << Rd_offset;
+}
+
+Instr Assembler::RnSP(Register rn) {
+  DCHECK(!rn.IsZero());
+  return (rn.code() & kRegCodeMask) << Rn_offset;
+}
+
 void Assembler::AddSub(const Register& rd, const Register& rn,
                        const Operand& operand, FlagsUpdate S, AddSubOp op) {
   DCHECK_EQ(rd.SizeInBits(), rn.SizeInBits());
diff --git a/src/codegen/arm64/assembler-arm64.h b/src/codegen/arm64/assembler-arm64.h
index f787bad464f82db2d138507832be7beafad658b5..bbbe52001634550052eac8b5b2712ae656575923 100644
--- a/src/codegen/arm64/assembler-arm64.h
+++ b/src/codegen/arm64/assembler-arm64.h
@@ -2095,11 +2095,7 @@ class V8_EXPORT_PRIVATE Assembler : public AssemblerBase {
     return rm.code() << Rm_offset;
   }
 
-  static Instr RmNot31(CPURegister rm) {
-    DCHECK_NE(rm.code(), kSPRegInternalCode);
-    DCHECK(!rm.IsZero());
-    return Rm(rm);
-  }
+  static Instr RmNot31(CPURegister rm);
 
   static Instr Ra(CPURegister ra) {
     DCHECK_NE(ra.code(), kSPRegInternalCode);
@@ -2123,15 +2119,8 @@ class V8_EXPORT_PRIVATE Assembler : public AssemblerBase {
 
   // These encoding functions allow the stack pointer to be encoded, and
   // disallow the zero register.
-  static Instr RdSP(Register rd) {
-    DCHECK(!rd.IsZero());
-    return (rd.code() & kRegCodeMask) << Rd_offset;
-  }
-
-  static Instr RnSP(Register rn) {
-    DCHECK(!rn.IsZero());
-    return (rn.code() & kRegCodeMask) << Rn_offset;
-  }
+  static Instr RdSP(Register rd);
+  static Instr RnSP(Register rn);
 
   // Flags encoding.
   inline static Instr Flags(FlagsUpdate S);
